/*******************************************************************************
* Copyright (c) 2012-2014 -- WPI Suite
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
* Contributor: team struct-by-lightning
*******************************************************************************/
package edu.wpi.cs.wpisuitetng.modules.PlanningPoker.views;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import edu.wpi.cs.wpisuitetng.janeway.config.ConfigManager;
import edu.wpi.cs.wpisuitetng.modules.PlanningPoker.controller.GetPlanningPokerGamesController;
import edu.wpi.cs.wpisuitetng.modules.PlanningPoker.controller.GetPlanningPokerUserController;
import edu.wpi.cs.wpisuitetng.modules.PlanningPoker.models.PlanningPokerUserModel;

/**
 * @author sfmailand
 *
 */
public class PreferencesView extends JPanel {

	
	
	
	public static void openNewTab() {
		PreferencesView view = new PreferencesView();
		MainView.getInstance().addCloseableTab("Preferences", view);
	}

    /**
     * Creates new form PreferencesWindow
     */
    public PreferencesView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        emailLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        aimLabel = new javax.swing.JLabel();
        aimField = new javax.swing.JTextField();
        smsLabel = new javax.swing.JLabel();
        smsField = new javax.swing.JTextField();
        preferenceLabel = new javax.swing.JLabel();
        sendEmail = new javax.swing.JCheckBox();
        sendSms = new javax.swing.JCheckBox();
        sendAIM = new javax.swing.JCheckBox();
        updateUser = new javax.swing.JButton();
        cancelBtn = new javax.swing.JToggleButton();
        emailWarning = new javax.swing.JLabel();
        aimWarning = new javax.swing.JLabel();
        smsWarning = new javax.swing.JLabel();

        
        emailLabel.setText("Email:");

        aimLabel.setText("AIM:");

        smsLabel.setText("SMS:");
        
		setEmailField();
		setAimField();
		setSmsField();
        
        preferenceLabel.setText("How would you like to recieve notifications?");

        sendEmail.setText("Email");
        sendEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailActionPerformed(evt);
            }
        });

        sendSms.setText("Sms");
        sendSms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSmsActionPerformed(evt);
            }
        });

        sendAIM.setText("AIM");
        sendAIM.setActionCommand("");
        sendAIM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAIMActionPerformed(evt);
            }
        });
        

        emailField.addKeyListener(new KeyAdapter(){
        	public void keyReleased(KeyEvent evt){
        		emailFieldKeyTyped(evt);
        	}
        });
        
        smsField.addKeyListener(new KeyAdapter(){
        	public void keyReleased(KeyEvent evt){
        		smsFieldKeyTyped(evt);
        	}
        });
        
        aimField.addKeyListener(new KeyAdapter(){
        	public void keyReleased(KeyEvent evt){
        		aimFieldKeyTyped(evt);
        	}
        });
    	
    	
    	
        updateUser.setText("Save Changes");

        cancelBtn.setText("Cancel Changes");



        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendSms)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(sendEmail)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendAIM))
                        .addComponent(preferenceLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateUser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(cancelBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailLabel)
                                    .addComponent(aimLabel)
                                    .addComponent(smsLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(emailField)
                                    .addComponent(aimField)
                                    .addComponent(smsField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailWarning)
                            .addComponent(aimWarning)
                            .addComponent(smsWarning))))
                .addContainerGap(569, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailWarning))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aimLabel)
                    .addComponent(aimField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aimWarning))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smsLabel)
                    .addComponent(smsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smsWarning))
                .addGap(18, 18, 18)
                .addComponent(preferenceLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendEmail)
                    .addComponent(sendAIM))
                .addGap(18, 18, 18)
                .addComponent(sendSms)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateUser)
                    .addComponent(cancelBtn))
                .addContainerGap(288, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    
    /**
	 * Sets the email field to the current user email
	 */
	private void setEmailField() {
		GetPlanningPokerUserController.getInstance().retrieveUser();
		
		try {
			Thread.sleep(150);
		} catch (InterruptedException e) {
		}

		String userEmail = PlanningPokerUserModel.getInstance().getUser(ConfigManager.getConfig().getUserName()).getEmail();
		if(userEmail != null){
			emailField.setText(userEmail);
		}
		
	}
	
    /**
	 * Sets the aim field to the current user aim
	 */
	private void setAimField() {
		GetPlanningPokerUserController.getInstance().retrieveUser();
		
		try {
			Thread.sleep(150);
		} catch (InterruptedException e) {
		}

		String userAIM = PlanningPokerUserModel.getInstance().getUser(ConfigManager.getConfig().getUserName()).getInstantMessage();
		if(userAIM != null){
			aimField.setText(userAIM);
		}
		
	}
	
	
	
    /**
	 * Sets the sms field to the current user sms
	 */
	private void setSmsField() {
		GetPlanningPokerUserController.getInstance().retrieveUser();
		
		try {
			Thread.sleep(150);
		} catch (InterruptedException e) {
		}

		String userSms = PlanningPokerUserModel.getInstance().getUser(ConfigManager.getConfig().getUserName()).getSms();
		if(userSms != null){
			smsField.setText(userSms);
		}
		
	}

	
	/**
	 * Description
	 * @param evt
	 */
	protected void emailFieldKeyTyped(KeyEvent evt) {
		checkAllFields();
	}
	
	protected void smsFieldKeyTyped(KeyEvent evt) {
		checkAllFields();
	}
	
	protected void aimFieldKeyTyped(KeyEvent evt){
		checkAllFields();
	}

	private void sendEmailActionPerformed(java.awt.event.ActionEvent evt) {                                          
        checkAllFields();
    }                                         

    private void sendSmsActionPerformed(java.awt.event.ActionEvent evt) {                                        
        checkAllFields();
    }                                       

    private void sendAIMActionPerformed(java.awt.event.ActionEvent evt) {                                        
        checkAllFields();
    }                                       


    
    public void checkAllFields(){
    	
    	boolean emailEntered = isValidEmail();
    	boolean aimEntered = !aimField.getText().equals("");
    	boolean smsEntered = smsField.getText().length() == 10;
    	
    	boolean oneOptionSelected = sendEmail.isSelected() || sendSms.isSelected() || sendAIM.isSelected();
    	
    	boolean aimChecked = true;
    	boolean emailChecked = true;
    	boolean smsChecked = true;
    	
    	if(sendAIM.isSelected() && !aimEntered){
    		aimChecked = false;
    		aimWarning.setText("Required to send AIM messages as notifications");
    	}
    	else{
    		aimWarning.setText("");
    	}
    	
    	if(sendEmail.isSelected() && !emailEntered){
    		emailChecked = false;
    		emailWarning.setText("Required to send email notifications");
    	}
    	else{
    		emailWarning.setText("");
    	}
    	
    	if(sendSms.isSelected() && !smsEntered){
    		smsChecked = false;
    		smsWarning.setText("Required to send SMS notifications");
    	}
    	else{
    		smsWarning.setText("");
    	}
    	
    	boolean canUpdate = ((emailEntered || aimEntered || smsEntered) && oneOptionSelected && emailChecked && smsChecked && aimChecked);
    	updateUser.setEnabled(canUpdate);

    


    }
    
    public boolean isValidEmail(){
    	String emailText = emailField.getText();
    	Pattern VALID_EMAIL_ADDRESS_REGEX = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$", Pattern.CASE_INSENSITIVE);
    	Matcher matcher = VALID_EMAIL_ADDRESS_REGEX .matcher(emailText);

    	if (matcher.find()) {
    		return true;
    	} 
    	else {
    		return false;
    	}
    }
    
	/**
	 * Listens to the session name field and disables "Create Game" button
	 * if the field is empty.
	 */


    
    // Variables declaration - do not modify                     
    private javax.swing.JLabel aimLabel;
    private javax.swing.JLabel aimWarning;
    private javax.swing.JToggleButton cancelBtn;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailWarning;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField aimField;
    private javax.swing.JTextField smsField;
    private javax.swing.JLabel preferenceLabel;
    private javax.swing.JCheckBox sendAIM;
    private javax.swing.JCheckBox sendEmail;
    private javax.swing.JCheckBox sendSms;
    private javax.swing.JLabel smsLabel;
    private javax.swing.JLabel smsWarning;
    private javax.swing.JButton updateUser;
    // End of variables declaration         
	

	
}


